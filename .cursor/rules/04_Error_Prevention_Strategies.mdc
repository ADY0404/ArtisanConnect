# Error Prevention Strategies

## üõ°Ô∏è Critical Error Prevention Rules

### 1. **NEVER Break Existing Functionality**

#### Before Any Change:
```bash
# Always create a backup branch
git checkout -b backup/before-feature-name
git checkout main
git checkout -b feature/feature-name
```

#### Testing Existing Features:
```bash
# Start development server
npm run dev

# Test these MANDATORY flows:
1. Home page loads ‚úì
2. Login/logout works ‚úì
3. Category browsing works ‚úì
4. Business detail page works ‚úì
5. Booking creation works ‚úì
6. User booking history works ‚úì
```

### 2. **Authentication Integration Failures**

#### Common Issues:
- Session not available in new components
- Protected routes not working
- User context lost

#### Prevention Pattern:
```jsx
// ALWAYS check session before component logic
"use client"
import { useSession } from 'next-auth/react'

function YourComponent() {
  const { data: session, status } = useSession()
  
  if (status === "loading") {
    return <LoadingSpinner />
  }
  
  if (!session) {
    return <LoginPrompt />
  }
  
  // Your component logic here
}
```

### 3. **API Integration Failures**

#### Common Mistakes:
- Not following GlobalApi pattern
- Missing error handling
- Incorrect GraphQL queries

#### Correct Pattern:
```javascript
// ‚úÖ ALWAYS follow this pattern in GlobalApi.js
const newApiFunction = async (params) => {
  const query = gql`
    query DescriptiveName {
      // GraphQL query with proper variable handling
      dataItems(where: { field: "${params.value}" }) {
        id
        field1
        field2
      }
    }
  `
  
  try {
    const result = await request(MASTER_URL, query)
    return result
  } catch (error) {
    console.error('API Error in newApiFunction:', error)
    throw new Error(`Failed to fetch data: ${error.message}`)
  }
}
```

#### Component Usage Pattern:
```jsx
// ‚úÖ ALWAYS handle loading and error states
const fetchData = async () => {
  try {
    setIsLoading(true)
    setError(null)
    const result = await GlobalApi.newApiFunction(params)
    setData(result.dataItems)
  } catch (error) {
    setError('Failed to load data. Please try again.')
    console.error('Component Error:', error)
  } finally {
    setIsLoading(false)
  }
}
```

## üö® High-Risk Operations

### 1. **Modifying GlobalApi.js**

#### Risks:
- Breaking existing API calls
- Corrupting data queries
- Authentication issues

#### Safe Modification Process:
```javascript
// 1. NEVER modify existing functions
// 2. ALWAYS add new functions
// 3. Test existing functions after changes

// ‚úÖ Safe addition:
export default {
  // ... all existing functions (DO NOT MODIFY)
  getCategory,
  getAllBusinessList,
  getBusinessByCategory,
  getBusinessById,
  createNewBooking,
  BusinessBookedSlot,
  GetUserBookingHistory,
  deleteBooking,
  
  // ‚úÖ Add new functions here
  newFunction
}
```

### 2. **Modifying Layout Files**

#### High-Risk Files:
- `app/layout.js`
- `app/(routes)/search/layout.jsx`
- `app/provider.js`

#### Safety Protocol:
```jsx
// ‚úÖ If you MUST modify layout files:
// 1. Copy the original content
// 2. Make minimal changes
// 3. Test authentication immediately
// 4. Verify all pages still work

// Example safe addition to layout.js:
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <NextAuthSessionProvider>
          <div className="mx-6 md:mx-16">
            <Header/>
            <Toaster />
            {/* ‚úÖ Safe to add context providers here */}
            {children}
          </div>
        </NextAuthSessionProvider>
      </body>
    </html>
  );
}
```

### 3. **Routing Changes**

#### Risks:
- Breaking existing navigation
- 404 errors on existing pages
- Breaking dynamic routes

#### Safe Routing Protocol:
```bash
# ‚úÖ When adding new routes:
# 1. Follow existing patterns exactly
# 2. Test navigation to/from new routes
# 3. Verify existing routes still work

# Existing pattern for new route:
app/(routes)/newfeature/_components/
app/(routes)/newfeature/page.jsx
app/(routes)/newfeature/layout.jsx  # Optional
```

## üîß Component Development Safeguards

### 1. **State Management Errors**

#### Common Issues:
- State not updating
- Infinite re-renders
- Memory leaks

#### Prevention Pattern:
```jsx
// ‚úÖ Safe state management pattern
const [data, setData] = useState([])
const [isLoading, setIsLoading] = useState(false)
const [error, setError] = useState(null)

// ‚úÖ Safe useEffect pattern
useEffect(() => {
  const fetchData = async () => {
    try {
      setIsLoading(true)
      const result = await GlobalApi.getData()
      setData(result.items)
    } catch (error) {
      setError(error.message)
    } finally {
      setIsLoading(false)
    }
  }
  
  fetchData()
}, []) // ‚úÖ Always specify dependencies
```

### 2. **Styling Conflicts**

#### Prevention Rules:
```jsx
// ‚úÖ Follow existing Tailwind patterns
<div className="p-5 shadow-sm flex justify-between">
  <div className="flex items-center gap-8">
    // Content
  </div>
</div>

// ‚ùå DON'T use conflicting styles
<div className="p-1 p-5"> // Conflicting padding
<div className="flex block"> // Conflicting display
```

### 3. **Import Errors**

#### Safe Import Pattern:
```jsx
// ‚úÖ Follow this exact order:
// 1. React/Next imports
import React, { useState, useEffect } from 'react'
import Image from 'next/image'
import Link from 'next/link'

// 2. Third-party libraries
import { useSession } from 'next-auth/react'

// 3. UI components
import { Button } from '@/components/ui/button'

// 4. Local components/services
import GlobalApi from '@/app/_services/GlobalApi'
import ComponentName from './ComponentName'
```

## üß™ Testing Before Commit

### Mandatory Testing Checklist:

#### Before Every Commit:
```bash
# 1. Check for console errors
# Open browser dev tools, check console

# 2. Test authentication flow
# Login -> Navigate -> Logout -> Login again

# 3. Test responsive design
# Mobile view (iPhone) -> Tablet -> Desktop

# 4. Test existing features
# Home page -> Category search -> Business detail -> Booking
```

#### Component-Specific Tests:
```jsx
// ‚úÖ Test these conditions for each component:
1. Loading state displays correctly
2. Error state displays correctly  
3. Empty state displays correctly
4. Success state displays correctly
5. Mobile responsiveness works
6. Authentication state handled
```

## üö¶ Warning Signs to Stop

### Immediate Stop Conditions:

1. **Console Errors Appear**
   ```
   ‚ùå Authentication error
   ‚ùå Module not found
   ‚ùå Hydration mismatch
   ‚ùå GraphQL errors
   ```

2. **Existing Features Break**
   ```
   ‚ùå Login stops working
   ‚ùå Pages won't load
   ‚ùå Navigation broken
   ‚ùå Booking system fails
   ```

3. **Build Failures**
   ```bash
   npm run build
   # If this fails, STOP and fix immediately
   ```

## üõ†Ô∏è Recovery Procedures

### When Things Go Wrong:

#### 1. Immediate Rollback:
```bash
# Undo last commit
git reset --hard HEAD~1

# Or checkout backup branch
git checkout backup/before-feature-name
```

#### 2. Identify Root Cause:
```bash
# Check what changed
git diff HEAD~1 HEAD

# Test specific component
# Isolate the breaking change
```

#### 3. Incremental Fix:
```bash
# Make smaller, safer changes
# Test each small change individually
# Don't try to fix everything at once
```

## üìã Pre-Implementation Safety Checklist

Before implementing ANY feature:

- [ ] Read existing similar components
- [ ] Understand current authentication patterns
- [ ] Plan file structure following existing patterns
- [ ] Identify all API calls needed
- [ ] Plan error states and loading states
- [ ] Consider mobile responsiveness
- [ ] Create backup branch
- [ ] Test existing functionality

## üéØ Code Review Questions

Ask yourself before committing:

1. Does this follow existing patterns?
2. Are all error states handled?
3. Is authentication properly integrated?
4. Are loading states implemented?
5. Is it mobile responsive?
6. Did I test existing functionality?
7. Are there any console errors?
8. Does the build pass?

## üö® Emergency Protocol

If you break the application:

1. **STOP** - Don't make more changes
2. **ROLLBACK** - Use git reset or backup branch
3. **ANALYZE** - Identify what went wrong
4. **PLAN** - Make a smaller, safer approach
5. **TEST** - Verify each small change
6. **DOCUMENT** - Note what caused the issue

Remember: **Working code is better than broken "perfect" code** 