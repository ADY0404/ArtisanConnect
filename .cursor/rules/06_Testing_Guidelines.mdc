# Testing Guidelines

## üß™ Testing Philosophy

**Rule #1**: Every feature must be tested before marking as complete
**Rule #2**: Test existing functionality after every change
**Rule #3**: Mobile-first testing approach

## üöÄ Quick Testing Protocol

### Before Every Commit:
```bash
# 1. Start development server
npm run dev

# 2. Execute Mandatory Test Flow (5 minutes)
```

### Mandatory Test Flow Checklist:
```
‚ñ° Home page loads without errors
‚ñ° Login button works
‚ñ° Login with Descope works
‚ñ° Category list displays
‚ñ° Business list displays
‚ñ° Click on category ‚Üí search page works
‚ñ° Click on business ‚Üí detail page works
‚ñ° Booking form works (if logged in)
‚ñ° My Bookings page shows data (if logged in)
‚ñ° Logout works
‚ñ° Mobile view responsive
```

## üì± Device Testing Requirements

### Test on These Viewport Sizes:
```javascript
// Mobile
- iPhone SE (375px)
- iPhone 13 (390px)

// Tablet  
- iPad (768px)

// Desktop
- Laptop (1024px)
- Desktop (1440px)
```

### Responsive Testing Checklist:
```
‚ñ° Navigation collapses properly on mobile
‚ñ° Components stack vertically on small screens
‚ñ° Text remains readable on all sizes
‚ñ° Buttons are touch-friendly (44px minimum)
‚ñ° Images scale properly
‚ñ° No horizontal scrolling
‚ñ° Grid layouts respond correctly
```

## üéØ Component Testing Framework

### For Each New Component:

#### 1. **Basic Rendering Test**
```jsx
// Manual test: Does component render without crashing?
‚ñ° Component displays without console errors
‚ñ° Props are received correctly
‚ñ° Default states show properly
```

#### 2. **State Management Test**
```jsx
// For components with state:
‚ñ° Initial state is correct
‚ñ° State updates work
‚ñ° Event handlers function properly
‚ñ° State doesn't cause infinite re-renders
```

#### 3. **API Integration Test**
```jsx
// For components using GlobalApi:
‚ñ° Loading state displays
‚ñ° Success state shows data
‚ñ° Error state displays properly
‚ñ° Empty state handles gracefully
```

#### 4. **Authentication Test**
```jsx
// For components using useSession:
‚ñ° Authenticated state works
‚ñ° Unauthenticated state works
‚ñ° Loading state handled
‚ñ° Protected actions require login
```

## üîÑ Integration Testing

### Feature Integration Checklist:

#### 1. **Navigation Flow Testing**
```
Test Path: Home ‚Üí Category ‚Üí Business ‚Üí Booking ‚Üí History
‚ñ° All links work correctly
‚ñ° Back button functions
‚ñ° URL parameters passed correctly
‚ñ° Page refreshes work
‚ñ° Authentication persists across navigation
```

#### 2. **Data Flow Testing**
```
‚ñ° Category selection filters businesses
‚ñ° Business details load correctly
‚ñ° Booking saves to user history
‚ñ° User history displays all bookings
‚ñ° Data persists after page refresh
```

#### 3. **Authentication Flow Testing**
```
‚ñ° Unauthenticated user sees login prompt
‚ñ° Login redirects to intended page
‚ñ° Authenticated user sees protected content
‚ñ° Logout clears session completely
‚ñ° Session expiry handled gracefully
```

## üö® Error State Testing

### Required Error Scenarios:

#### 1. **Network Error Testing**
```javascript
// Simulate these conditions:
‚ñ° No internet connection
‚ñ° Slow network (throttling)
‚ñ° API server down
‚ñ° GraphQL query errors
‚ñ° Timeout errors
```

#### 2. **Authentication Error Testing**
```javascript
‚ñ° Login failure
‚ñ° Session expired
‚ñ° Invalid token
‚ñ° Permission denied
```

#### 3. **Data Error Testing**
```javascript
‚ñ° Empty API responses
‚ñ° Malformed data
‚ñ° Missing required fields
‚ñ° Large datasets
‚ñ° Special characters in data
```

## üìä Performance Testing

### Performance Checklist:
```
‚ñ° Page load time < 3 seconds
‚ñ° Images load efficiently
‚ñ° No unnecessary re-renders
‚ñ° API calls not duplicated
‚ñ° Memory usage stable
‚ñ° No console warnings
```

### Performance Testing Tools:
```bash
# Lighthouse audit
# Chrome DevTools Performance tab
# Network throttling
# Memory profiling
```

## üîß Browser Testing

### Required Browser Support:
```
‚ñ° Chrome (latest)
‚ñ° Firefox (latest)
‚ñ° Safari (latest)
‚ñ° Edge (latest)
‚ñ° Mobile Safari (iOS)
‚ñ° Mobile Chrome (Android)
```

### Browser-Specific Tests:
```
‚ñ° NextAuth login works in all browsers
‚ñ° Local storage persists
‚ñ° Session cookies work
‚ñ° Image optimization works
‚ñ° CSS grid/flexbox support
```

## üß© API Testing

### GlobalApi Function Testing:

#### For Each API Function:
```javascript
// Test with valid data
‚ñ° Function returns expected structure
‚ñ° GraphQL query executes successfully
‚ñ° Data matches expected format

// Test with edge cases
‚ñ° Empty parameters
‚ñ° Invalid parameters
‚ñ° Non-existent IDs
‚ñ° Special characters
‚ñ° Large datasets
```

#### API Error Handling:
```javascript
‚ñ° Network errors caught and handled
‚ñ° GraphQL errors provide meaningful messages
‚ñ° Timeout scenarios handled
‚ñ° Rate limiting handled gracefully
‚ñ° Invalid responses handled
```

## üèóÔ∏è Build Testing

### Production Build Testing:
```bash
# 1. Build the application
npm run build

# 2. Test build output
npm run start

# 3. Verify production behavior
‚ñ° All pages load correctly
‚ñ° Static assets serve properly
‚ñ° Environment variables work
‚ñ° API connections work
‚ñ° Authentication works in production mode
```

### Environment Testing:
```bash
# Test different environments
‚ñ° Development (npm run dev)
‚ñ° Production build (npm run build && npm run start)
‚ñ° Deployment environment
```

## üìù Manual Testing Scripts

### Quick Smoke Test (3 minutes):
```
1. Open app in browser
2. Verify home page loads
3. Click login, verify it works
4. Click a category, verify search works
5. Click a business, verify details load
6. Click logout, verify it works
```

### Full Feature Test (15 minutes):
```
1. Complete smoke test
2. Test all navigation links
3. Test booking flow end-to-end
4. Test responsive design on mobile
5. Test error states (network off)
6. Test different user scenarios
```

### User Journey Testing:
```
Customer Journey:
1. Land on homepage
2. Browse categories
3. Select service type
4. View business details
5. Book appointment
6. View booking history
7. Logout

Provider Journey (when implemented):
1. Login as provider
2. View dashboard
3. Manage services
4. View bookings
5. Update availability
```

## üêõ Bug Testing Scenarios

### Common Bug Patterns to Test:

#### 1. **State Synchronization Bugs**
```
‚ñ° Data refresh after booking
‚ñ° Category switching
‚ñ° User session changes
‚ñ° Multiple tab behavior
```

#### 2. **Timing Bugs**
```
‚ñ° Fast clicking buttons
‚ñ° Quick navigation
‚ñ° API calls overlapping
‚ñ° Component unmounting during API calls
```

#### 3. **Edge Case Bugs**
```
‚ñ° Empty search results
‚ñ° All categories selected
‚ñ° Invalid business IDs
‚ñ° Expired sessions
‚ñ° Network reconnection
```

## üéØ Testing Automation Setup

### When to Add Automated Tests:

After implementing major features, add:

#### 1. **Unit Tests** (Jest + React Testing Library)
```bash
npm install --save-dev jest @testing-library/react @testing-library/jest-dom
```

#### 2. **Integration Tests** (Cypress)
```bash
npm install --save-dev cypress
```

#### 3. **Test Structure**:
```
__tests__/
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ Header.test.jsx
‚îÇ   ‚îú‚îÄ‚îÄ BusinessList.test.jsx
‚îÇ   ‚îî‚îÄ‚îÄ CategoryList.test.jsx
‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îú‚îÄ‚îÄ home.test.jsx
‚îÇ   ‚îî‚îÄ‚îÄ booking.test.jsx
‚îú‚îÄ‚îÄ api/
‚îÇ   ‚îî‚îÄ‚îÄ GlobalApi.test.js
‚îî‚îÄ‚îÄ e2e/
    ‚îú‚îÄ‚îÄ booking-flow.cy.js
    ‚îî‚îÄ‚îÄ authentication.cy.js
```

## üîç Testing Tools & Setup

### Required Dev Dependencies:
```json
{
  "jest": "^29.5.0",
  "@testing-library/react": "^13.4.0",
  "@testing-library/jest-dom": "^5.16.5",
  "cypress": "^12.17.0"
}
```

### Jest Configuration:
```javascript
// jest.config.js
const nextJest = require('next/jest')

const createJestConfig = nextJest({
  dir: './',
})

const customJestConfig = {
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  moduleDirectories: ['node_modules', '<rootDir>/'],
  testEnvironment: 'jest-environment-jsdom',
}

module.exports = createJestConfig(customJestConfig)
```

## ‚ö†Ô∏è Testing Red Flags

### Stop Development If:
```
‚ùå Home page doesn't load
‚ùå Login/logout broken
‚ùå Console shows authentication errors
‚ùå API calls failing
‚ùå Mobile view completely broken
‚ùå Build process fails
‚ùå TypeScript/JavaScript errors
```

### Warning Signs:
```
‚ö†Ô∏è Slow page loads (>5 seconds)
‚ö†Ô∏è Console warnings
‚ö†Ô∏è Inconsistent mobile behavior
‚ö†Ô∏è Memory leaks
‚ö†Ô∏è Network request errors
‚ö†Ô∏è State synchronization issues
```

## üéâ Testing Success Criteria

### Feature Completion Checklist:
```
‚ñ° All device sizes work
‚ñ° All browsers work
‚ñ° All user flows work
‚ñ° Error states handled
‚ñ° Loading states present
‚ñ° Performance acceptable
‚ñ° No console errors
‚ñ° Authentication integrated
‚ñ° Mobile optimized
‚ñ° Accessible UI
```

### Definition of Done:
```
A feature is complete when:
1. It works on all required devices
2. It handles all error cases
3. It integrates with authentication
4. It follows existing patterns
5. It doesn't break existing features
6. It performs well
7. It's been manually tested
8. It's ready for production
```

## üöÄ Testing Workflow Integration

### Daily Testing Routine:
```
1. Morning: Quick smoke test
2. After each feature: Full feature test
3. Before commit: Integration test
4. End of day: Cross-browser test
5. Before deployment: Production test
```

Remember: **Testing is not optional - it's what separates working software from broken demos** 